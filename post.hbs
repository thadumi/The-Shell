{{!< default}}

<div class="progress-container">
    <span class="progress-bar"></span>
</div>

{{! The comment above "< default" means - insert everything in this file into
    the {body} of the default.hbs template, which contains our header/footer. }}

<main class="content" role="main">

    <article class="{{post_class}}">

        {{! Each post has the blog logo at the top, with a link back to the home page }}
        <header class="post-header">
            <a id="blog-logo" href="{{@site.url}}">
                {{#if @site.logo}}
                <img src="{{@site.logo}}" alt="Blog Logo" />
                {{else}}
                {{@site.title}}
                {{/if}}
            </a>
            <!--div class="inner">
                {{> "site-nav"}}
            </div-->
        </header>

        {{! Everything inside the #post tags pulls data from the post }}
        {{#post}}

        {{! Everything below outputs content of the the post which has been published }}
        <span class="post-meta"><time datetime="{{date format="YYYY-MM-DD"}}">{{date format='DD MMM YYYY'}}</time>
            {{#if tags}}on {{tags separator=" | "}}{{/if}}</span>

        <h1 class="post-title">{{{title}}}</h1>

        <section class="post-content">
            {{content}}
        </section>

        <footer class="post-footer">

            {{#if primary_author}}
            <section class="author">
                <h4>{{primary_author.name}}</h4>
                <p>{{primary_author.bio}}</p>
            </section>
            {{/if}}
        </footer>

        {{/post}}

    </article>

</main>

{{#contentFor "scripts"}}
<script>
    $(document).ready(function () {
        let viewport = $(window);
        let post = $('.post-content');
        // Responsive videos with fitVids
        post.fitVids();
        // Format code blocks and add line numbers
        function codestyling() {
            $('pre code').each(function (i, e) {
                // Code highlight
                hljs.highlightBlock(e);
                // No lines for plain text blocks
                if (!$(this).hasClass('language-text')) {
                    let code = $(this);
                    // Calculate amount of lines
                    let lines = code.html().split(/\n(?!$)/g).length;
                    let numbers = [];
                    if (lines > 1) {
                        lines++;
                    }
                    for (i = 1; i < lines; i++) {
                        numbers += '<span class="line" aria-hidden="true">' + i + '</span>';
                    }
                    code.parent().append('<div class="lines">' + numbers + '</div>');
                }
            });
        }
        codestyling();


        let body = document.body,
            html = document.documentElement;
        let height = Math.max(
            body.scrollHeight,
            body.offsetHeight,
            html.clientHeight,
            html.scrollHeight,
            html.offsetHeight
        );

        // Reading progress bar on window top
        function readingProgress() {
            //let postBottom = post.offset().top + post.height();
            //let viewportHeight = viewport.height();
        
            //let progress = 100 - (((postBottom - (viewport.scrollTop() + viewportHeight) + viewportHeight / 3) / (postBottom - viewportHeight + viewportHeight / 3)) * 100);
            
            //console.log('postBottom: ' + postBottom);
            //console.log('view:' + progress);
            let scrollFromTop = (html.scrollTop || body.scrollTop) + html.clientHeight;
            let progress = (scrollFromTop / height) * 100;
            $('.progress-bar').css('width', progress + '%');
            (progress > 100) ? $('.progress-container').addClass('complete') : $('.progress-container').removeClass('complete');
        }
        
        readingProgress();
        // Trigger reading progress
        viewport.on({
            'scroll': function () {
                readingProgress();
            },
            'resize': function () {
                readingProgress();
            },
            'orientationchange': function () {
                readingProgress();
            }
        });
        // Check if disqus is defined by code injection
        if (typeof disqus === 'undefined') {
            // hide comment section
            $('.post-comments').css({
                'display': 'none'
            });
        } else {
            $('#show-disqus').on('click', function () {
                $.ajax({
                    type: "GET",
                    url: "//" + disqus + ".disqus.com/embed.js",
                    dataType: "script",
                    cache: true
                });
                $(this).parent().addClass('activated');
            });
        }
    });
</script>
{{/contentFor}}